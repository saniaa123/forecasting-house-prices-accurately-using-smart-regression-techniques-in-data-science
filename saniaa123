# house_price_forecasting.py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from xgboost import XGBRegressor

# Load dataset
df = pd.read_csv('train.csv')  # Download from https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data

# Drop ID column
df.drop(columns=['Id'], inplace=True)

# Drop columns with too many missing values
df.drop(columns=['Alley', 'PoolQC', 'Fence', 'MiscFeature'], inplace=True)

# Fill missing values
for col in df.select_dtypes(include='number').columns:
    df[col] = df[col].fillna(df[col].median())
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].fillna('None')

# Encode categorical features using one-hot encoding
df = pd.get_dummies(df)

# Separate features and target variable
X = df.drop('SalePrice', axis=1)
y = df['SalePrice']

# Split data into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define models
models = {
    "Ridge": Ridge(alpha=10),
    "Lasso": Lasso(alpha=0.01),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, learning_rate=0.1, objective='reg:squarederror', random_state=42)
}

# Train and evaluate models
results = {}
print("\nModel Performance (RMSE):")
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    preds = model.predict(X_test_scaled)
    rmse = np.sqrt(mean_squared_error(y_test, preds))
    results[name] = rmse
    print(f"{name}: {rmse:.2f}")

# Ensemble prediction (average of top two models)
ensemble_preds = (
    models['Gradient Boosting'].predict(X_test_scaled) +
    models['XGBoost'].predict(X_test_scaled)
) / 2

ensemble_rmse = np.sqrt(mean_squared_error(y_test, ensemble_preds))
results['Ensemble'] = ensemble_rmse
print(f"Ensemble (GB + XGB): {ensemble_rmse:.2f}")

# Visualize model performances
plt.figure(figsize=(10, 5))
sns.barplot(x=list(results.keys()), y=list(results.values()))
plt.ylabel('RMSE')
plt.title('Model Comparison on House Price Forecasting')
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

# Feature importance from XGBoost
importances = models['XGBoost'].feature_importances_
indices = np.argsort(importances)[-15:]
plt.figure(figsize=(10, 6))
plt.title("Top 15 Feature Importances (XGBoost)")
plt.barh(range(len(indices)), importances[indices], align="center")
plt.yticks(range(len(indices)), [X.columns[i] for i in indices])
plt.xlabel("Importance")
plt.tight_layout()
plt.show()
